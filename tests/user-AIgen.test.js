// Generated by CodiumAI
const jwt = require('jsonwebtoken')
const sinon = require('sinon')
const { expect } = require('chai')
const signIn = require('../services/user-services').signIn

describe('signIn', () => {
  // successfully generates a JWT token for valid user data
  it('should generate a JWT token when valid user data is provided', () => {
    
    const req = {
      user: {
        toJSON: () => ({ id: 1, username: 'testuser', password: 'password123' })
      }
    }

    const cb = sinon.spy()
    const tokenStub = sinon.stub(jwt, 'sign').returns('fake-jwt-token')

    signIn(req, cb)

    expect(tokenStub.calledOnce).to.be.true
    expect(cb.calledWith(null, { token: 'fake-jwt-token', user: { id: 1, username: 'testuser' } })).to.be.true

    tokenStub.restore()
  })

  // handles missing or undefined req.user gracefully
  it('should handle missing or undefined req.user gracefully', () => {
    const req = {}
    const cb = sinon.spy()

    signIn(req, cb)

    expect(cb.calledOnce).to.be.true
    expect(cb.args[0][0]).to.be.an('error')
  })

  // returns the token and user data in the callback
  it('should return token and user data in the callback', () => {
    const req = {
      user: {
        toJSON: () => ({ id: 1, username: 'testuser', password: 'password123' })
      }
    }

    const cb = sinon.spy()
    const tokenStub = sinon.stub(jwt, 'sign').returns('fake-jwt-token')

    // Call the function under test
    signIn(req, cb)

    // Assertion
    expect(tokenStub.calledOnce).to.be.true
    expect(cb.calledWith(null, { token: 'fake-jwt-token', user: { id: 1, username: 'testuser' } })).to.be.true

    // Clean up
    tokenStub.restore()
  })

  // handles invalid or malformed user data
  it('should handle invalid or malformed user data', () => {    
    const req = {
      user: {
        toJSON: () => ({ id: 1, username: 'testuser', password: 'password123' })
      }
    }

    const cb = (error, data) => {
      expect(error).to.exist
      expect(data).to.not.exist
    }

    signIn(req, cb)
  })
})
